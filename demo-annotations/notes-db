
docker run --name <name> -e POSTGRES_PASSWORD=root -p 5432:5432 -d postgres<:version>

docker exec -it <name> psql -U postgres
create database xxx


CREATE TABLE team (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    state VARCHAR(2) NOT NULL CHECK (state IN ('AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG',
    'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO')),
    photo_url VARCHAR(1024) NOT NULL,
    UNIQUE(name, state)
);

CREATE TABLE match (
    id SERIAL PRIMARY KEY,
    date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    team_one_id INTEGER NOT NULL REFERENCES team(id) ON UPDATE CASCADE ON DELETE NO ACTION,
    score_team_one INTEGER NOT NULL,
    team_two_id INTEGER NOT NULL REFERENCES team(id) ON UPDATE CASCADE ON DELETE NO ACTION,
    score_team_two INTEGER NOT NULL,
    team_supported_id INTEGER NOT NULL REFERENCES team(id) ON UPDATE CASCADE ON DELETE NO ACTION,
    UNIQUE(date, team_one_id, team_two_id)
);

Spring actuator 

dependency
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
</dependencies>
/actuator/xxx

yml
management:
  endpoint:
    shutdown:
      enabled: true
      
https://www.youtube.com/watch?v=9nOMLOnXLHo

@ManyToOne ------------------------------
Isso significa que muitos objetos de uma classe estão associados a um único objeto de outra classe.
Suponhamos que você tenha duas entidades, Pessoa e Endereco, onde uma pessoa pode ter apenas um endereço, 
mas um endereço pode estar associado a várias pessoas. Nesse caso teamTwo onde a pessoa pode ter um id
e o id pode estar associado a varios times

- os ids estarão associados a diversos times no teamTwo or teamOne, pq ambos irão variar de acordo com o times
selecionados. ou seja, sempre terá um único id, porém podem ser vários ids.

@Entity
public class Pessoa {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String nome;

    @ManyToOne
    @JoinColumn(name = "endereco_id")
    private Endereco endereco;

    // Getters e Setters
}

modelmapper ----------------------------
instac dependency 
user = modelMapper.map(dto, User.class);

@bean no application.app
